<?php
//------------------------------------------------------------------------
// Задание 1: Определение простой функции и возвращаемые значения
/* Создайте функцию multiply , которая принимает два числа в качестве параметров, умножает их и возвращает результат. */

function multiply($a, $b) {
    return $a * $b;
}
// Пример вызова функции
echo multiply(3, 4); // Ожидаемый результат: 12

//------------------------------------------------------------------------
//Задание 2: Область видимости переменных
/* Создайте переменную $globalVar с числом 50 за пределами функции. Внутри функции sumGlobal создайте локальную переменную $localVar со значением 100 и сложите ее с $globalVar . Выведите результат. */
//
$globalVar = 50; // глобальная переменная

function sumGlobal() {
    global $globalVar; // доступ к глобальной переменной
    $localVar = 100;   // локальная переменная
    return $localVar + $globalVar; // сумма локальной и глобальной переменных
}

// Пример вызова функции
echo sumGlobal(); // Ожидаемый результат: 150

//------------------------------------------------------------------------
// Задание 3: Рекурсия
/* Напишите рекурсивную функцию factorial , которая вычисляет факториал числа. Факториал числа n — это произведение всех чисел от 1 до n */
//
function factorial($n) {
    if ($n === 0) {
        return 1; // Базовый случай: факториал 0 равен 1
    } else {
        return $n * factorial($n - 1); // Рекурсивный вызов
    }
}

// Пример вызова функции
echo factorial(5); // Ожидаемый результат: 120

//------------------------------------------------------------------------
// Задание 4: Анонимные функции
/* Создайте анонимную функцию, которая принимает строку и выводит её в верхнем регистре. Передайте эту функцию в качестве аргумента для функции array_map для обработки массива строк */
//
// Массив строк
$fruits = ["apple", "banana", "cherry"];

// Анонимная функция, которая преобразует строку в верхний регистр
$result = array_map(function($str) {
    return strtoupper($str);
}, $fruits);

// Вывод результата
print_r($result); // Ожидаемый результат: ["APPLE", "BANANA", "CHERRY"]

//------------------------------------------------------------------------
// Задание 5: Стрелочные функции
/* Напишите стрелочную функцию, которая принимает два числа и возвращает их сумму */
//
$sum = fn($a, $b) => $a + $b;

// Пример вызова функции
echo $sum(3, 4); // Ожидаемый результат: 7

//------------------------------------------------------------------------
// Задание 6: Замыкания / Closure
/* Создайте функцию counter , которая возвращает замыкание. Замыкание должно увеличивать счётчик на 1 при каждом вызове */
//

function counter() {
    $count = 0; // Инициализация счетчика

    // Возвращаем замыкание
    return function() use (&$count) {
        $count++;
        return $count;
    };
}

// Создаем экземпляр замыкания
$myCounter = counter();

// Пример вызова замыкания
echo $myCounter(); // Ожидаемый результат: 1
echo $myCounter(); // Ожидаемый результат: 2
echo $myCounter(); // Ожидаемый результат: 3

//------------------------------------------------------------------------
// Задание 7: Генераторы и оператор yield
/* Напишите генератор, который возвращает числа от 1 до 5 с помощью оператора yield */
//

function numberGenerator() {
    for ($i = 1; $i <= 5; $i++) {
        yield $i; // Генерация значений от 1 до 5
    }
}

// Использование генератора
foreach (numberGenerator() as $number) {
    echo $number . " "; // Ожидаемый результат: 1 2 3 4 5
}

//------------------------------------------------------------------------
// Задание 8: Использование встроенных функций
/* Используя встроенные функции PHP, найдите минимальное и максимальное значения в массиве чисел */
//

$numbers = [3, 5, 1, 9, 10, 2];

// Нахождение минимального значения
echo "Минимум: " . min($numbers) . "\n"; // Ожидаемый результат: Минимум: 1

// Нахождение максимального значения
echo "Максимум: " . max($numbers) . "\n"; // Ожидаемый результат: Максимум: 10

?>


